rule all:
    input: expand("{accession}/cirit.fasta", accession=config["accessions"] if type(config["accessions"]) == list else config["accessions"].split(","))

rule download_sra:
    output: 
        temp("{accession}/{accession}_1.fastq"),
        temp("{accession}/{accession}_2.fastq"),
        temp("{accession}/{accession}.sratools.done")
    log: "{accession}/{accession}.sratools.log"
    group: "preprocessing"
    resources: 
        cpus=6
    envmodules:
        "sratoolkit/2.9.6",
    shell: 
        """
        prefetch {wildcards.accession} -f yes > {log} 2>&1
        fasterq-dump {wildcards.accession} -O {wildcards.accession} --threads {resources.cpus} > {log} 2>&1

        # ensure we have a valid output by checking the logfile
        if $(grep -q "reads written" {log}); then 
            touch "{wildcards.accession}/{wildcards.accession}.sratools.done"
        else
            echo "Error in fasterq-dump, trying again......"
            exit 1
        fi
        
        # # if we still have the SRA file, delete it
        # [ -f {wildcards.accession}/{wildcards.accession}.sra ] && rm {wildcards.accession}/{wildcards.accession}.sra

        # # compress the intermediate FASTQ files
        # pigz -p{resources.cpus} {accession}/{accession}_1.fastq.gz
        # pigz -p{resources.cpus} {accession}/{accession}_2.fastq.gz
        """
# # A method using wget
# rule download_sra:
#     output: 
#         temp("{accession}/{accession}_{r}.fastq"),
#     resources: 
#         cpus=2
#     params:
#         dir1=lambda wildcards: wildcards.accession[:6],
#         dir2=lambda wildcards: "" if len(wildcards.accession) == 9 else "/" + wildcards.accession[9:].zfill(3)
#     shell: 
#         "wget -P {wildcards.accession} ftp://ftp.sra.ebi.ac.uk/vol1/fastq/{params.dir1}{params.dir2}/{wildcards.accession}/{wildcards.accession}_{wildcards.r}.fastq.gz"

rule fastp:
    input: 
        r1 = "{accession}/{accession}_1.fastq",
        r2 = "{accession}/{accession}_2.fastq"
    output: 
        r1 = "{accession}/{accession}_1.fastp.fastq.gz",
        r2 = "{accession}/{accession}_2.fastp.fastq.gz"
    group: "preprocessing"
    resources:
         # If you want to change the numer of CPUs, make sure pass one fewer thread to fastp
         # It uses the worker thread count in addition to one extra as the "main" thread
        cpus = 17,
    envmodules:
        "fastp/0.20.1"
    shell: 
        "fastp -i {input.r1} -I {input.r2} -o {output.r1} -O {output.r2} "
        "--thread 16 "
        "-h {wildcards.accession}/{wildcards.accession}.fastp.html -j {wildcards.accession}/{wildcards.accession}.fastp.json"

rule rnaspades:
    input: 
        r1 = "{accession}/{accession}_1.fastp.fastq.gz",
        r2 = "{accession}/{accession}_2.fastp.fastq.gz"
    output: "{accession}/rnaspades/transcripts.fasta"
    resources:
        cpus = 32,
        mem_mb = 50000, # the max memory for SPAdes defaults to 250 G but we never even get close
        time_min = 240
    envmodules:
        "spades/3.14.1"
    shell: "export OMP_NUM_THREADS={resources.cpus} && rnaspades.py -1 {input.r1} -2 {input.r2} -o {wildcards.accession}/rnaspades --threads {resources.cpus}"

rule cirit:
    input: "{accession}/rnaspades/transcripts.fasta"
    output: "{accession}/cirit.fasta"
    resources:
        time_min = 5
    envmodules:
        "java/12.0.1"
    shell: "java -jar ~/Cirit-1.0.jar -i {input} -o {output}"