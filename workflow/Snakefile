localrules: summarize, per_accession # we don't need to send these rules to the cluster

rule summarize:
    output:
        "summary/all.dbn",
        "summary/all.sam",
        "summary/all.fasta",
        "summary/all.no_hits.dbn",
        "summary/all.no_hits.fasta"
    input: expand("{accession}/{accession}.all", accession=config["accessions"] if type(config["accessions"]) == list else config["accessions"].split(","))
    shell:
        """
        cat */*.sam > summary/all.sam
        cat */*.dbn > summary/all.dbn
        cat */cirit_gt200_lt2000.fasta > summary/all.fasta
        cat */blast/cirit_gt200_lt2000.no_hits.fasta > summary/all.no_hits.fasta
        cat */blast/cirit_gt200_lt2000.no_hits.dbn > summary/all.no_hits.dbn
        """

rule per_accession:
    output: touch("{accession}/{accession}.all")
    input: 
        "{accession}/{accession}_known_viroids.sam",
        "{accession}/blast/cirit_gt200_lt2000.no_hits.dbn",
        "{accession}/blast/cirit_gt200_lt2000.no_hits.fasta"

rule download_sra:
    output: 
        temp("{accession}/{accession}_1.fastq"),
        temp("{accession}/{accession}_2.fastq"),
        temp("{accession}/{accession}.sratools.done")
    log: "{accession}/{accession}.sratools.log"
    group: "preprocessing"
    resources: 
        cpus=6
    envmodules:
        "sratoolkit/2.10.9",
    shell: 
        """
        prefetch {wildcards.accession} -f yes >> {log} 2>&1
        fasterq-dump {wildcards.accession} -O {wildcards.accession} --threads {resources.cpus} >> {log} 2>&1

        # ensure we have a valid output by checking the logfile
        if $(grep -q "reads written" {log}); then 
            touch "{wildcards.accession}/{wildcards.accession}.sratools.done"
        else
            echo "Error in fasterq-dump, trying again......"
            exit 1
        fi
        
        # if we still have the SRA file, delete it
        [ -f {wildcards.accession}/{wildcards.accession}.sra ] && rm {wildcards.accession}/{wildcards.accession}.sra

        # # compress the intermediate FASTQ files
        # pigz -p{resources.cpus} {wildcards.accession}/{wildcards.accession}_1.fastq.gz
        # pigz -p{resources.cpus} {wildcards.accession}/{wildcards.accession}_2.fastq.gz
        """
# # A method using wget
# rule download_sra:
#     output: 
#         temp("{accession}/{accession}_{r}.fastq"),
#     resources: 
#         cpus=2
#     params:
#         dir1=lambda wildcards: wildcards.accession[:6],
#         dir2=lambda wildcards: "" if len(wildcards.accession) == 9 else "/" + wildcards.accession[9:].zfill(3)
#     shell: 
#         "wget -P {wildcards.accession} ftp://ftp.sra.ebi.ac.uk/vol1/fastq/{params.dir1}{params.dir2}/{wildcards.accession}/{wildcards.accession}_{wildcards.r}.fastq.gz"

rule fastp:
    input: 
        r1 = "{accession}/{accession}_1.fastq",
        r2 = "{accession}/{accession}_2.fastq"
    output: 
        r1 = "{accession}/{accession}_1.fastp.fastq.gz",
        r2 = "{accession}/{accession}_2.fastp.fastq.gz"
    log:
        json = "{accession}/{accession}.fastp.json",
        html = "{accession}/{accession}.fastp.html"
    group: "preprocessing"
    resources:
         # If you want to change the numer of CPUs, make sure pass one fewer thread to fastp
         # It uses the worker thread count in addition to one extra as the "main" thread
        cpus = 17,
    envmodules:
        "fastp/0.20.1"
    shell: 
        "fastp -i {input.r1} -I {input.r2} -o {output.r1} -O {output.r2} "
        "--thread 16 -z 9 "
        "-h {log.html} -j {log.json}"

rule rnaspades:
    input: 
        r1 = "{accession}/{accession}_1.fastp.fastq.gz",
        r2 = "{accession}/{accession}_2.fastp.fastq.gz"
    output: "{accession}/rnaspades/transcripts.fasta"
    resources:
        cpus = 32,
        mem_mb = 50000, # the max memory for SPAdes defaults to 250 G but we never even get close
        time_min = 240
    envmodules:
        "spades/3.14.1"
    shell: "export OMP_NUM_THREADS={resources.cpus} && rnaspades.py -1 {input.r1} -2 {input.r2} -o {wildcards.accession}/rnaspades --threads {resources.cpus}"

rule cirit:
    input: "{accession}/rnaspades/transcripts.fasta"
    output: "{accession}/cirit.fasta"
    resources:
        time_min = 5
    group: "postprocessing"
    envmodules:
        "java/12.0.1"
    shell: "java -jar ~/Cirit-1.0.jar -i {input} -o {output}"

rule length_filter:
    input: "{accession}/cirit.fasta"
    output: "{accession}/cirit_gt200_lt2000.fasta"
    resources: time_min = 10
    group: "postprocessing"
    envmodules: "seqkit/0.14.0"
    shell: "seqkit seq -m 200 -M 2000 -o {output} {input}"

rule rnafold:
    input: "{accession}/cirit_gt200_lt2000.fasta"
    output: 
        "{accession}/cirit_gt200_lt2000.dbn",
        directory("{accession}/ps")
    resources:
        time_min = 15,
        cpus = 32
    group: "postprocessing"
    envmodules:
        "viennarna/2.4.17"
    shell: 
        """
        cd {wildcards.accession}
        RNAfold cirit_gt200_lt2000.fasta --jobs={resources.cpus} --circ --temp=25 > cirit_gt200_lt2000.dbn
        mkdir ps
        mv *.ps ps
        """

rule mapping:
    input: 
        r1 = "{accession}/{accession}_1.fastp.fastq.gz",
        r2 = "{accession}/{accession}_2.fastp.fastq.gz"
    output: "{accession}/{accession}_known_viroids.sam"
    resources:
        cpus = 16 # samtools view uses additional threads, so it's hardcoded
    envmodules:
        "samtools/1.11",
        "minimap2/2.17"
    shell: "minimap2 -ax sr -t {resources.cpus} {config[viroid_path]} {input.r1} {input.r2} | samtools view --threads 15 -F 4 - > {output}"

rule blastn:
    input: "{accession}/rnaspades/transcripts.fasta"
    output: 
        asn = "{accession}/blast/{accession}.11.asn",
    resources:
        cpus = 16,
        mem_mb =  100000
    group: "blast"
    envmodules:
        "blast/2.11.0+"
    shell: "blastn -task blastn -db /fdb/blastdb/nt -query {input} -out {output.asn} -num_threads {resources.cpus} -outfmt 11"

rule blast_formatter:
    input: "{accession}/blast/{accession}.11.asn" 
    output:
        tsv = "{accession}/blast/{accession}.7.tsv",
        txt = "{accession}/blast/{accession}.0.txt"
    resources:
        mem_mb = 32000
    group: "blast"
    envmodules:
        "blast/2.11.0+"
    shell:
        """
        export BLASTDB=/fdb/taxonomy/
        blast_formatter -archive {input} -outfmt "0" > {output.txt}
        blast_formatter -archive {input} -outfmt "7 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids sblastnames scomnames stitle" > {output.tsv}
        """

rule seqs_with_no_blast_hits:
    input: 
        "{accession}/cirit_gt200_lt2000.fasta",
        "{accession}/blast/{accession}.7.tsv", 
    output: 
        "{accession}/blast/cirit_gt200_lt2000.no_hits.fasta"
    group: "blast"
    conda:
        "envs/no_blast_hits.yaml"
    params:
        max_evalue = 1.0
    script: "scripts/no_blast_hits.py"

rule structures_with_no_blast_hits:
    input: 
        no_hits = "{accession}/blast/cirit_gt200_lt2000.no_hits.fasta",
        structures = "{accession}/cirit_gt200_lt2000.dbn"
    output: "{accession}/blast/cirit_gt200_lt2000.no_hits.dbn"
    group: "blast"
    envmodules: "seqkit/0.14.0"
    shell: "seqkit seq {input.no_hits} -n | xargs -I @ grep -A 2 @ {input.structures} > {output}"
